
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.cup;

import java_cup.runtime.*;
import main.jflex.LexerScanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return VCParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public VCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\007\000\002\006\004\000\002\007\004" +
    "\000\002\007\007\000\002\010\004\000\002\010\006\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\012\003" +
    "\000\002\012\005\000\002\012\005\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\014\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\016\003\000\002\016\005\000\002\017\003\000" +
    "\002\017\005\000\002\020\005\000\002\004\003\000\002" +
    "\005\005\000\002\005\003\000\002\032\003\000\002\032" +
    "\004\000\002\033\004\000\002\033\005\000\002\034\004" +
    "\000\002\034\005\000\002\035\004\000\002\035\005\000" +
    "\002\036\006\000\002\037\013\000\002\040\007\000\002" +
    "\040\011\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\042\005\000" +
    "\002\042\006\000\002\022\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\024" +
    "\003\000\002\024\005\000\002\023\003\000\002\023\005" +
    "\000\002\023\006\000\002\025\003\000\002\025\007\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\030\006\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\024\017\015\020\007\021\020\035\012\042" +
    "\013\047\011\050\024\051\004\052\025\001\002\000\044" +
    "\002\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\036\ufff5\041\ufff5\043\ufff5\001\002\000\004\002" +
    "\001\001\002\000\044\002\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\034\036\uffdf\041\uffdf\043\uffdf" +
    "\001\002\000\024\017\015\020\007\021\020\035\012\042" +
    "\013\047\011\050\024\051\004\052\025\001\002\000\026" +
    "\017\015\020\007\021\020\035\012\040\071\042\013\047" +
    "\011\050\024\051\004\052\025\001\002\000\044\002\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\036\ufff7\041\ufff7\043\ufff7\001\002\000\024\017\015\020" +
    "\007\021\020\035\012\042\013\047\011\050\024\051\004" +
    "\052\025\001\002\000\024\017\015\020\007\021\020\035" +
    "\012\042\013\047\011\050\024\051\004\052\025\001\002" +
    "\000\004\002\064\001\002\000\026\017\uffc3\020\uffc3\021" +
    "\uffc3\035\uffc3\040\uffc3\042\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\001\002\000\044\002\uffe9\020\046\021\047\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\041\uffe9\043" +
    "\uffe9\001\002\000\044\002\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\041\uffdc\043\uffdc" +
    "\001\002\000\024\017\015\020\007\021\020\035\012\042" +
    "\013\047\011\050\024\051\004\052\025\001\002\000\044" +
    "\002\uffec\020\uffec\021\uffec\022\052\023\051\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\036\uffec\041\uffec\043\uffec\001\002\000\044\002" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\042\025\041" +
    "\026\043\027\044\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\036\uffe4\041\uffe4\043\uffe4\001\002\000\044\002\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\036\uffef\041\uffef\043\uffef\001\002\000\044\002\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\036" +
    "\ufff6\041\ufff6\043\ufff6\001\002\000\044\002\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4" +
    "\041\ufff4\043\ufff4\001\002\000\044\002\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0\041" +
    "\ufff0\043\ufff0\001\002\000\044\002\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\037\032\036\033\uffe1\034\uffe1\036\uffe1\041\uffe1" +
    "\043\uffe1\001\002\000\006\030\031\033\032\001\002\000" +
    "\024\017\015\020\007\021\020\035\012\042\013\047\011" +
    "\050\024\051\004\052\025\001\002\000\024\017\015\020" +
    "\007\021\020\035\012\042\013\047\011\050\024\051\004" +
    "\052\025\001\002\000\044\002\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\034\036\uffde\041\uffde\043" +
    "\uffde\001\002\000\024\017\015\020\007\021\020\035\012" +
    "\042\013\047\011\050\024\051\004\052\025\001\002\000" +
    "\044\002\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\036\uffe0\041\uffe0\043\uffe0\001\002\000\024" +
    "\017\015\020\007\021\020\035\012\042\013\047\011\050" +
    "\024\051\004\052\025\001\002\000\024\017\015\020\007" +
    "\021\020\035\012\042\013\047\011\050\024\051\004\052" +
    "\025\001\002\000\044\002\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\041\uffe3\043\uffe3" +
    "\001\002\000\024\017\015\020\007\021\020\035\012\042" +
    "\013\047\011\050\024\051\004\052\025\001\002\000\024" +
    "\017\015\020\007\021\020\035\012\042\013\047\011\050" +
    "\024\051\004\052\025\001\002\000\024\017\015\020\007" +
    "\021\020\035\012\042\013\047\011\050\024\051\004\052" +
    "\025\001\002\000\024\017\015\020\007\021\020\035\012" +
    "\042\013\047\011\050\024\051\004\052\025\001\002\000" +
    "\044\002\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\036\uffe5\041\uffe5\043\uffe5\001\002\000\024" +
    "\017\015\020\007\021\020\035\012\042\013\047\011\050" +
    "\024\051\004\052\025\001\002\000\024\017\015\020\007" +
    "\021\020\035\012\042\013\047\011\050\024\051\004\052" +
    "\025\001\002\000\044\002\uffea\020\uffea\021\uffea\022\052" +
    "\023\051\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\036\uffea\041\uffea\043\uffea" +
    "\001\002\000\024\017\015\020\007\021\020\035\012\042" +
    "\013\047\011\050\024\051\004\052\025\001\002\000\024" +
    "\017\015\020\007\021\020\035\012\042\013\047\011\050" +
    "\024\051\004\052\025\001\002\000\044\002\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\036\uffee" +
    "\041\uffee\043\uffee\001\002\000\044\002\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\036\uffed\041" +
    "\uffed\043\uffed\001\002\000\044\002\uffeb\020\uffeb\021\uffeb" +
    "\022\052\023\051\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\041\uffeb" +
    "\043\uffeb\001\002\000\044\002\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\041\uffe6\043" +
    "\uffe6\001\002\000\044\002\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\041\uffe8\043\uffe8" +
    "\001\002\000\044\002\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\036\uffe7\041\uffe7\043\uffe7\001" +
    "\002\000\044\002\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\036\uffe2\041\uffe2\043\uffe2\001\002" +
    "\000\044\002\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\036\uffdd\041\uffdd\043\uffdd\001\002\000" +
    "\044\002\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\036\ufff2\041\ufff2\043\ufff2\001\002\000\004" +
    "\002\000\001\002\000\004\043\066\001\002\000\044\002" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\036\ufff8\041\ufff8\043\ufff8\001\002\000\044\002\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\036\ufff1\041\ufff1\043\ufff1\001\002\000\044\002\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\036" +
    "\uffda\041\uffda\043\uffda\001\002\000\024\017\015\020\007" +
    "\021\020\035\012\042\013\047\011\050\024\051\004\052" +
    "\025\001\002\000\044\002\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\036\073\041\ufffa\043\ufffa" +
    "\001\002\000\024\017\015\020\007\021\020\035\012\042" +
    "\013\047\011\050\024\051\004\052\025\001\002\000\044" +
    "\002\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\036\uffdb\041\uffdb\043\uffdb\001\002\000\004\041" +
    "\076\001\002\000\044\002\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\041\ufff9\043\ufff9" +
    "\001\002\000\044\002\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\036\ufff3\041\ufff3\043\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\032\002\013\004\004\010\025\011\022\012" +
    "\020\013\015\014\021\015\026\016\005\017\027\020\016" +
    "\022\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\025\011\076\022\007\001\001" +
    "\000\032\004\067\005\071\010\025\011\022\012\020\013" +
    "\015\014\021\015\026\016\005\017\027\020\016\022\007" +
    "\001\001\000\002\001\001\000\010\010\025\011\066\022" +
    "\007\001\001\000\030\004\064\010\025\011\022\012\020" +
    "\013\015\014\021\015\026\016\005\017\027\020\016\022" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\025\011\062\022" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\025" +
    "\011\022\012\020\013\015\014\021\015\026\016\005\017" +
    "\061\022\007\001\001\000\022\010\025\011\022\012\020" +
    "\013\015\014\021\015\026\016\032\022\007\001\001\000" +
    "\002\001\001\000\020\010\025\011\022\012\020\013\015" +
    "\014\021\015\034\022\007\001\001\000\002\001\001\000" +
    "\016\010\025\011\022\012\020\013\015\014\060\022\007" +
    "\001\001\000\016\010\025\011\022\012\020\013\015\014" +
    "\037\022\007\001\001\000\002\001\001\000\014\010\025" +
    "\011\022\012\020\013\057\022\007\001\001\000\014\010" +
    "\025\011\022\012\020\013\056\022\007\001\001\000\014" +
    "\010\025\011\022\012\020\013\055\022\007\001\001\000" +
    "\014\010\025\011\022\012\020\013\044\022\007\001\001" +
    "\000\002\001\001\000\012\010\025\011\022\012\054\022" +
    "\007\001\001\000\012\010\025\011\022\012\047\022\007" +
    "\001\001\000\002\001\001\000\010\010\025\011\053\022" +
    "\007\001\001\000\010\010\025\011\052\022\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\074\010\025\011\022\012" +
    "\020\013\015\014\021\015\026\016\005\017\027\020\016" +
    "\022\007\001\001\000\002\001\001\000\030\004\073\010" +
    "\025\011\022\012\020\013\015\014\021\015\026\016\005" +
    "\017\027\020\016\022\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


    // Connect this parser to a scanner!
    LexerScanner lexer;

    public VCParser(LexerScanner lex, ComplexSymbolFactory sf) {
        super(lex,sf);
        lexer = lex;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VCParser$actions {
  private final VCParser parser;

  /** Constructor */
  CUP$VCParser$actions(VCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VCParser$do_action_part00000000(
    int                        CUP$VCParser$act_num,
    java_cup.runtime.lr_parser CUP$VCParser$parser,
    java.util.Stack            CUP$VCParser$stack,
    int                        CUP$VCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VCParser$result;

      /* select the action based on the action number */
      switch (CUP$VCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // arg ::= expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("arg",0, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= arg EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)).value;
		RESULT = start_val;
              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VCParser$parser.done_parsing();
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // arg_list ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("arg_list",1, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // arg_list ::= LBRACK arg_list COMMA arg RBRACK 
            {
              Object RESULT =null;
		 System.out.println("arg_list"); 
              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("arg_list",1, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-4)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // para_decl ::= type declarator 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("para_decl",4, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // para_list ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("para_list",5, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // para_list ::= LBRACK para_list COMMA para_decl RBRACK 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("para_list",5, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-4)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // primary_expr ::= identifier expr_list 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("primary_expr",6, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // primary_expr ::= identifier LBRACE expr RBRACE 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("primary_expr",6, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-3)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primary_expr ::= LBRACK expr RBRACK 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("primary_expr",6, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primary_expr ::= INTEGERLITERAL 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("primary_expr",6, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primary_expr ::= FLOATLITERAL 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("primary_expr",6, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // primary_expr ::= BOOLEANLITERAL 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("primary_expr",6, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // primary_expr ::= STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("primary_expr",6, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unary_expr ::= PLUS unary_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("unary_expr",7, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unary_expr ::= SUBTRACT unary_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("unary_expr",7, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unary_expr ::= NOT unary_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("unary_expr",7, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_expr ::= primary_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("unary_expr",7, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // multiplicative_expr ::= unary_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",8, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // multiplicative_expr ::= multiplicative_expr MULTIPLY unary_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",8, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // multiplicative_expr ::= multiplicative_expr DIVIDE unary_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",8, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // additive_expr ::= multiplicative_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("additive_expr",9, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // additive_expr ::= additive_expr PLUS multiplicative_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("additive_expr",9, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // additive_expr ::= additive_expr SUBTRACT multiplicative_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("additive_expr",9, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rel_expr ::= additive_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("rel_expr",10, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rel_expr ::= rel_expr LESS additive_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("rel_expr",10, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rel_expr ::= rel_expr LESSEQ additive_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("rel_expr",10, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rel_expr ::= rel_expr MORE additive_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("rel_expr",10, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rel_expr ::= rel_expr MOREEQ additive_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("rel_expr",10, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // equality_expr ::= rel_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("equality_expr",11, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // equality_expr ::= equality_expr EQEQ rel_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("equality_expr",11, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // equality_expr ::= equality_expr NOTEQ rel_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("equality_expr",11, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cond_and_expr ::= equality_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("cond_and_expr",12, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cond_and_expr ::= cond_and_expr AND equality_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("cond_and_expr",12, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond_or_expr ::= cond_and_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("cond_or_expr",13, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond_or_expr ::= cond_or_expr OR cond_and_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("cond_or_expr",13, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assigment_expr ::= cond_or_expr EQ cond_or_expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("assigment_expr",14, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= assigment_expr 
            {
              Object RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()).right;
		Object ae1 = (Object)((java_cup.runtime.Symbol) CUP$VCParser$stack.peek()).value;
		 System.out.println("expr"); 
              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_list ::= expr_list COMMA expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_stmt ::= SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("expr_stmt",24, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_stmt ::= expr SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("expr_stmt",24, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // return_stmt ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // return_stmt ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // continue_stmt ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("continue_stmt",26, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // continue_stmt ::= CONTINUE expr SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("continue_stmt",26, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // break_stmt ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("break_stmt",27, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // break_stmt ::= BREAK expr SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("break_stmt",27, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // while_stmt ::= WHILE LBRACK expr RBRACK 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$VCParser$stack.elementAt(CUP$VCParser$top-1)).value;
		 System.out.println("While (" + e1.toString() + ")"); 
              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("while_stmt",28, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-3)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_stmt ::= FOR LBRACK expr SEMI expr SEMI expr RBRACK stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("for_stmt",29, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-8)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_stmt ::= IF LBRACK expr RBRACK stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",30, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-4)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_stmt ::= IF LBRACK expr RBRACK stmt ELSE stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("if_stmt",30, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-6)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= compound_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("stmt",31, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("stmt",31, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("stmt",31, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("stmt",31, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= break_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("stmt",31, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("stmt",31, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("stmt",31, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("stmt",31, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // compound_stmt ::= LTRIBRACE compound_stmt RTRIBRACE 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("compound_stmt",32, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // compound_stmt ::= LTRIBRACE var_decl stmt RTRIBRACE 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("compound_stmt",32, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-3)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= VOID 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= INT 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // initialiser ::= expr 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("initialiser",18, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // initialiser ::= LTRIBRACE expr_list RTRIBRACE 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("initialiser",18, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declarator ::= identifier 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("declarator",17, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declarator ::= identifier LBRACE LBRACE 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("declarator",17, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declarator ::= identifier LBRACE INTEGERLITERAL LBRACE 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("declarator",17, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-3)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // init_declarator ::= declarator 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("init_declarator",19, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // init_declarator ::= declarator LBRACK EQ initialiser RBRACK 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("init_declarator",19, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-4)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // init_declarator_list ::= init_declarator_list COMMA init_declarator 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",20, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // init_declarator_list ::= init_declarator 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("init_declarator_list",20, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // var_decl ::= type init_declarator_list SEMI 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("var_decl",21, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-2)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // func_decl ::= type identifier para_list compound_stmt 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("func_decl",22, ((java_cup.runtime.Symbol)CUP$VCParser$stack.elementAt(CUP$VCParser$top-3)), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // program ::= func_decl 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("program",23, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // program ::= var_decl 
            {
              Object RESULT =null;

              CUP$VCParser$result = parser.getSymbolFactory().newSymbol("program",23, ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VCParser$stack.peek()), RESULT);
            }
          return CUP$VCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VCParser$do_action(
    int                        CUP$VCParser$act_num,
    java_cup.runtime.lr_parser CUP$VCParser$parser,
    java.util.Stack            CUP$VCParser$stack,
    int                        CUP$VCParser$top)
    throws java.lang.Exception
    {
              return CUP$VCParser$do_action_part00000000(
                               CUP$VCParser$act_num,
                               CUP$VCParser$parser,
                               CUP$VCParser$stack,
                               CUP$VCParser$top);
    }
}

}
